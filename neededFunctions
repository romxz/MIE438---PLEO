// **** Variables ==================================================
/* these integer arrays represent the order in which we wish to traverse the possible paths, in terms of waypoints
 eg. We can think of the map as a set of waypoints:
 |-----------|
 |2  1  14 13|
 |3   15   12|
 |4   16   11|
 |5   17   10|
 |6  7  8   9|
 |-----------|
 Then if we could represent a given path using an array, for example the path pathA = [1,2,3,4,5,6,7,8,17,16,15,12],
 would start at 'A' and go through all the obstacles
*/
int[] pathA;
int[] pathB;
// this variable stores the last activated waypoint
int currentWaypoint;
// this variable stores the next waypoint, generally depending on the chosen path and current waypoint,
// but also could depend on other things
int nextWaypoint;
// -------------------------------------------------------------


// main code will go here
// it will call other functions, below, that can be implemented independently
main(){
}

// Basically wastes time, in milliseconds
killtime(int ms)
{
 new start = time();
 while (time() - start < ms){
	}
}

// **** Instruction Paths ========================================
// The instruction list that will activate the motion scripts to move through path "A"
instructionPathA(){
}

// The instruction list that will activate the motion scripts to move through path "B"
instructionPathB(){
}

// This instruction list will activate a default path in case we get an error and lose our current location
instructionPathE(){
}
// --------------------------------------------------------------

// **** Waypoint related ========================================
// Returns the last activated Waypoint
getCurrentWayPoint(){
}

// Returns the next Waypoint in the list
getNextWaypoint(){
}

// Calls the motion scripts in order to go to the next waypoint on the current path
goToNextWaypoint(){
}

// Called to update to a new waypoint, once the target is reached
updateNextWaypoint(){
}

// Counts how long it will take to go from a current waypoint to the next waypoint
// these values should be determined experimentally, based on how long it takes cleo to move to it
timer(currentWaypoint, nextWaypoint){
}
// --------------------------------------------------------------

// **** Motion Scripts ==========================================
// Called to move PLEO forward. time is for how long we want this to run
moveForward(int time){
}

// Called to move PLEO backward. time is for how long we want this to run
moveBackward(int time){
}

// A specific implementation of moveBackward, for when we reach an edge and need more space
backUp(){
}

// Called to execute a "turn Left" action
turnLeft(){
}

// Called to execute a "turn Right" action
turnRight(){

// Called to move neck right for sensing 
moveNeckRight(){
}

// Called to move neck left for sensing 
moveNeckLeft(){
}

// Called to move neck straight for sensing, or default 
moveNeckStraight(){
}

// Called to move neck down for sensing 
moveNeckDown(){
}

// Called to move neck up, as default
moveNeckUp(){
}

// Wags the tail, for aesthetic purposes
wagTail(){
}
// --------------------------------------------------------------

// **** Sensor Scripts ===============================================
// Senses if there is an edge. It will probably be called very often/continuously
senseEdge{}{
}

// Senses if there is an object/obstacle. It will probably be called very often/continuously
senseObject(){
}

// this function that will detect if there is a corner.
// To implement this, it should probably try to sense an edge to the sides and to the front
// It should return the direction it needs to go to avoid falling (either left, right, or backwards)
senseCorner(){
}
// --------------------------------------------------------------

// **** Sound Scripts ===============================================
// this will be called whenever certain waypoints have been achieved, for feedback
soundHowl(){
}
// --------------------------------------------------------------


