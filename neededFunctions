/* these integer arrays represent the order in which we wish to traverse the possible paths, in terms of waypoints
 eg. We can think of the map as a set of waypoints:
 |-----------|
 |2  1 14  13|
 |3   15   12|
 |4   16   11|
 |5   17   10|
 |6   7 8   9|
 |-----------|
 Then if we could represent a given path using an array, for example the path pathA = [1,2,3,4,5,6,7,8,17,16,15,12],
 would start at 'A' and go through all the obstacles
*/
int[] pathA;
int[] pathB;


// main code will go here
// it will call other functions, below, that can be implemented independently
main(){
}

// this is the instruction list that will activate the motion scripts to move through path "A"
instructionPathA(){
  
}

// this is the instruction list that will activate the motion scripts to move through path "B"
instructionPathB(){
}

// this function will return the last activated Waypoint
getCurrentWayPoint(){
}

// this function will return the next Waypoint in the list
getNextWaypoint(){
}

// this function will call the motion scripts in order to go to the next waypoint  
goToNextWaypoint(){
}

// this function will be called to update to a new waypoint, once the target is reached
updateNextWaypoint(){
}

// this function will be called whenever we want to move PLEO forward
moveForward(){
}

// this function will be called whenever we want to move PLEO backward
moveBackward(){
}

// this function will be called whenever we want PLEO to execute a "turn Left" action
turnLeft(){
}

// this function will be called whenever we want PLEO to execute a "turn Right" action
turnRight(){
}

// this function will be called whenever we want to sense an edge. It will probably be called very often/continuously
senseEdge{}{
}

// this function will be called whenever we need to sense an object. It will probably be called very often/continuously
senseObject(){
}

// this function will be used to count how long it will take to go from a current waypoint to the next waypoint
// these values should be determined experimentally, based on how long it takes cleo to move to it
timer(currentWaypoint, nextWaypoint){
}

// this is a more complicated function that will detect when we are at a corner.
// To implement this, it will try to sense for an edge to the sides and to the front
// It should return the direction it needs to go to avoid falling (either left or right)
senseCorner(){
}
